* cutils
Uma pequena biblioteca criada para tornar código C um pouco menos poluído e mais fácil de escrever.

** Memória
Ao invés de alocar vários buffers e liberar eles um por um, pode-se liberar todos de uma vez com uma função:

#+begin_src c
#define CUTILS_IMPLEMENTATION //não é um header só
#include "cutils/cutils.h"

int main(int argc, char **argv){
	mem_init();

	char *buffer = mem_alloc(10);
 	mem_copy(buffer, "Hello"); 
  	/*
   	sempre irá garantir que a quantidade
  	de dados copiados é menor que o tamanho do buffer.
     	*/

	buffer = mem_ralloc(buffer, 20); // equivalente ao realloc()
	mem_copy(buffer, "Hello, World!");

	puts(buffer);

	mem_freeall(true);
	// usa dois arrays internamente. o boolean diz se eles devem ser liberados também.
	return 0;
}
#+end_src

Os outros "módulos" da biblioteca usam essas funções internamente, então
o ideal é sempre chamar as funções /mem_init/ e /mem_freeall/.

*** A macro mem_at
A função /mem_copy/ oferece grande ajuda na prevenção de /buffer overflows/, mas não é o suficiente. Por isso, também há uma macro que pode ser usada para tornar o código mais seguro, /mem_at/.

Causar um buffer overflow e um possível crash é muito simples:
#+begin_src c
endereco[99999] = 'A';
#+end_src

Para evitar que isso aconteça, pode-se usar a macro desta forma:
#+begin_src c
mem_at(endereco, x, y);
#+end_src

Onde /endereço/ é o ponteiro (previamente alocado com /mem_alloc/), /x/ é o tamanho da operação e /y/ é a posição.

Exemplo:
#+begin_src c
mem_at(ints, sizeof(int), 0) = 13;
printf("%d\n", mem_at(ints, sizeof(int), 0));
#+end_src

Que é o equivalente a:
#+begin_src c
ints[0] = 13;
printf("%d\n", ints[0]);
#+end_src

Caso os limites do buffer sejam ultrapassados, o programa será abortado.

** Strings
Existem [[https://github.com/IucassacuI/cutils/blob/main/str.h][várias]] funções de manipulação de strings, muitas com nomes inspirados em métodos Ruby.
Alguns que valem a pena mencionar são /str_sub/, /str_gsub/, /str_split/ e /str_format/.
#+begin_src c
char *str_sub(const char *str, const char *substr, const char *new);
#+end_src

Substitui a primeira ocorrência de /substr/ em /str/ por /new/.

/str_gsub/ substitui todas as ocorrências encontradas.

#+begin_src c
char **str_split(const char *str, const char *separator);
#+end_src
Quebra a string /str/ por /separator/.

#+begin_src c
char *str_format(const char *fmt, ...);
#+end_src
Funciona da mesma forma que o printf, mas retorna a string ao invés de imprimí-la.

** Arrays
O cutils também oferece uma implementação de arrays que tem inteiros unsigned de 64 bits como elementos, possibilitando armazenar qualquer dado, bastando apenas fazer o /casting/ do ponteiro para /uint64_t/.
As [[https://github.com/IucassacuI/cutils/blob/main/array.h][funções]] também têm nomes inspirados em métodos Ruby.

#+begin_src c
array nums = arr_new();
nums = arr_push(nums, 1);
nums = arr_push(nums, 2);
nums = arr_push(nums, 3);
nums = arr_pop(nums);

arr_print(nums);
#+end_src

Pode-se iterar sobre um array de duas formas,
assim...
#+begin_src c
for(int i = 0; i < arr_size(arr); i++)
	printf("%lu\n", arr_next(&arr));
#+end_src
...ou assim:
#+begin_src c
for(int i = 0; i < arr_size(arr); i++)
	printf("%lu\n", arr_at(i));
#+end_src

** Hash maps
Também conhecidos como /maps/ e /dicionários/.
Usa o algoritmo /djb_hash/ internamente.

#+begin_src c
hashmap pessoa_idade = hash_new();
hash_set(pessoa_idade, "lucas", 17);
hash_set(pessoa_idade, "ellison", 84);

printf("Idade: %lu\n", hash_get(pessoa_idade, "ellison"));
#+end_src
